BIG-OH ASYMPTOMATIC NOTATION
good code have towo things:
1. readability
2. scalability
- algorithmic efficiency is as the character increases how much we need to do operations on it.

211.- O(n) -> LINEAR TIME -> as the number of elements increase ,no of operations will increase,example:compress_boxes
212. O(1) -> constant time -> as the number of elements increase ,no of operations will be constant, example: first_compress_box, or getting output for just two boxes

// What is the Big O of the below function? (Hint, you may want to go line by line)
function funChallenge(input) {
  let a = 10;//O(1)
  a = 50 + 3;//O(1)

  for (let i = 0; i < input.length; i++) {//O(n)
    anotherFunction();//O(n)
    let stranger = true;////O(n)
    a++;//O(n)
  }
  return a;//O(1)
}
funChallenge();
answer:
// big o -> 3 + 4n 


2nd example
// What is the Big O of the below function? (Hint, you may want to go line by line)
function anotherFunChallenge(input) {
  let a = 5;
  let b = 10;
  let c = 50;
  for (let i = 0; i < input; i++) {
    let x = i + 1;
    let y = i + 2;
    let z = i + 3;

  }
  for (let j = 0; j < input; j++) {
    let p = j * 2;
    let q = j * 2;
  }
  let whoAmI = "I don't know";
}

answer:
big o-> O(4 + 7n)




